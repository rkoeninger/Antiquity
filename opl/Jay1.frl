/* some predicates that may help you with the homework.
You can download this file from wwww.ececs.uc.edu/~aralescu/403/Jay1.frl
I left out comments on purpose so that, by studying the predicates you will
see what they do .... fill in comments for each so that you can remember */

/* (decl T LIST) states that each element of the list LIST is of type T it 
processes all such clauses to extract the type map; it assumes that 
declarations were valid.  NONE ARE ACTUALLY TESTED!!!! */

((decl intt (x y z)))
((decl bool (a b c)))
((decl intt (w t)))

((memory (0 1 2 3 4 5 6 7 8 9 10) ))

/* ((type_map)) produces the predicate (tm L) where L is a list of pairs, (type variable) extracted from (valid) declarations*/

((type_map LL)(findall L1 ((decl T L)(append (T) L L1)) LL)(pp LL))

((make_pairs1 (T) ()))
((make_pairs1 (T V |L) ((T V) |LL))(make_pairs1 (T |L) LL))


((make_pairs2 () ()))
((make_pairs2 (H|T) TM)
	(make_pairs1 H HTM)
	(make_pairs2 T TTM)
	(append HTM TTM TM))

((make_tm TM)(type_map L)(make_pairs2 L TM)(addcl ((TypeMap TM)) ))

((state 0 () ()))
((state 0 ((T V)|L) ((V undef)|ST))
		(state 0 L ST))

((onion1 () _ ()))
((onion1 ((E1 E2)|L) (E1 E) ((E1 E)|L)))
((onion1 (H | L) (E1 E) (H | LL))(onion1 L (E1 E) LL))

((onion2 L () L))
((onion2 L (H|T) LL)(onion1 L H L1)(onion2 L1 T LL))


((myget VAR ((VAR VAL)|_) VAL))
((myget VAR (_|T) VAL)(myget VAR T VAL))

/* concrete syntax Assignment -> Identifier = Expression;*/

((assignment (I = | E))(indentifier I)(expression E))

/********  Expression *******/

% Expression -> Term
((expression E)(term E))

% or, Expression -> Expression + Term
((expression E)
	(append E1 (+ | T) E)
	(expression E1)
	(term T))

% or, Expression -> Expression - Term
((expression E)
	(append E1 (- | T) E)
	(expression E1)
	(term T))

/******  Term *****/

%Term -> Factor 
((term T)(factor T))

% Term -> Term * Factor
((term T)
	(append T1 (* | F) T)
	(term T1)
	(factor F))

% Term -> Term / Factor
((term T)
	(append T1 (/ | F) T)
	(term T1)
	(factor F))

/********* factor *********/

% factor -> identifier
((factor F)(identifier F))

% factor -> literal
((factor F)(literal F))

% factor -> (Expression)
((factor (E))(expression E))

/******** identifier : var names only one character lower case ****/

((identifier X)(identifierS L)(member X L))

((identifierS (a b c d e f g h i j k l m n o p q r s t u v w x y z) ))

/**** literal : boolean turth values true, false; all integers *******/
((literal true))
((literal false))
((literal X)(int X))  % note that this can only be used to test 
                      % if X is an integer and not to produce an integer.


/*****************  general purpose list processing predicates *********/
((append () L L))
((append (H|T) L (H|TT))(append T L TT))

((member H (H|_)))
((member X (H|T))(member X T))









